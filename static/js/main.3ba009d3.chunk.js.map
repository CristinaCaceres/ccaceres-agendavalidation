{"version":3,"sources":["componentes/Header.js","componentes/Formulario.js","componentes/Contacto.js","componentes/Contactos.js","componentes/ContactoSeleccionado.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","aria-haspopup","aria-labelledby","placeholder","Formulario","agregarContacto","useForm","register","handleSubmit","errors","console","log","useState","nombres","apellidos","fechaNac","direccion","telCasa","telCelular","observaciones","contacto","setContacto","error","handleChange","e","contactoAntiguo","target","name","value","onSubmit","data","JSON","stringify","role","htmlFor","onChange","ref","required","pattern","inputRef","format","allowEmptyFormatting","mask","cols","rows","Contacto","setContactoSelec","onClick","src","alt","Contactos","contactos","map","c","ContactoSeleccionado","contactoselec","App","contactosLS","parse","localStorage","getItem","setContactos","objContacto","contactosAntiguo","setItem","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.3ba009d3.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Header = () => {\r\n    return (\r\n        <header>\r\n            <nav className=\"navbar navbar-expand-sm navbar-dark bg-dark\">\r\n                <a className=\"navbar-brand\" href=\"!#\">Navbar</a>\r\n                <button className=\"navbar-toggler d-lg-none\" type=\"button\" data-toggle=\"collapse\" data-target=\"#collapsibleNavId\" aria-controls=\"collapsibleNavId\"\r\n                    aria-expanded=\"false\" aria-label=\"Toggle navigation\"></button>\r\n                <div className=\"collapse navbar-collapse\" id=\"collapsibleNavId\">\r\n                    <ul className=\"navbar-nav mr-auto mt-2 mt-lg-0\">\r\n                        <li className=\"nav-item active\">\r\n                            <a className=\"nav-link\" href=\"!#\">Home <span className=\"sr-only\">(current)</span></a>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <a className=\"nav-link\" href=\"!#\">Link</a>\r\n                        </li>\r\n                        <li className=\"nav-item dropdown\">\r\n                            <a className=\"nav-link dropdown-toggle\" href=\"!#\" id=\"dropdownId\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">Dropdown</a>\r\n                            <div className=\"dropdown-menu\" aria-labelledby=\"dropdownId\">\r\n                                <a className=\"dropdown-item\" href=\"!#\">Action 1</a>\r\n                                <a className=\"dropdown-item\" href=\"!#\">Action 2</a>\r\n                            </div>\r\n                        </li>\r\n                    </ul>\r\n                    <form className=\"form-inline my-2 my-lg-0\">\r\n                        <input className=\"form-control mr-sm-2\" type=\"text\" placeholder=\"Search\" />\r\n                        <button className=\"btn btn-outline-success my-2 my-sm-0\" type=\"submit\">Search</button>\r\n                    </form>\r\n                </div>\r\n            </nav>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React, { useState, Fragment } from 'react'\r\nimport { useForm } from 'react-hook-form';\r\nimport NumberFormat from 'react-number-format';\r\n\r\nimport './../css/formularios.css'\r\n\r\nconst Formulario = ({ agregarContacto }) => {\r\n\r\n    // ------------ REACT HOOK FORM ---------------\r\n    const { register, handleSubmit, errors } = useForm();\r\n\r\n    // Imprimiendo posibles errores \r\n    console.log(errors);\r\n\r\n    const onSubmit = data => {\r\n        // La data sólo va a llegar sí y sólo sí todos los campos del form\r\n        // han sido validados correctamente\r\n        console.log(\"Formulario validado correctamente\");\r\n        console.log(JSON.stringify(data));\r\n\r\n        // crear el contacto en la agenda\r\n        agregarContacto(contacto);\r\n\r\n        //let contactoAntiguo = { ...contacto };\r\n        //contactoAntiguo.push()\r\n        //console.log(\"Enviando formulario\");\r\n\r\n        //reinciar el formulario\r\n        setContacto({\r\n            nombres: '',\r\n            apellidos: '',\r\n            fechaNac: '',\r\n            direccion: '',\r\n            telCasa: '',\r\n            telCelular: '',\r\n            observaciones: ''\r\n\r\n        });\r\n    };\r\n\r\n    // ------------ END REACT HOOK FORM ---------------\r\n\r\n\r\n    {/* Objeto */ }\r\n    const [contacto, setContacto] = useState({\r\n        nombres: '',\r\n        apellidos: '',\r\n        fechaNac: '',\r\n        direccion: '',\r\n        telCasa: '',\r\n        telCelular: '',\r\n        observaciones: ''\r\n\r\n    });\r\n\r\n\r\n    const [error, setError] = useState(false);\r\n\r\n    // funcion que modifica el state de acuerdo a los inputs del formulario\r\n    const handleChange = (e) => {\r\n        //console.log(e.target.value);\r\n        // creando una copia del contacto antiguo\r\n        let contactoAntiguo = { ...contacto };\r\n        // modificando el contacto antiguo con los nuevos\r\n        contactoAntiguo[e.target.name] = e.target.value;\r\n        // actualizando el contacto con la copia modificada\r\n        setContacto(contactoAntiguo);\r\n        //console.log(e);\r\n    }\r\n\r\n    const enviarFormulario = (e) => {\r\n        //Prevenir que la pagina se recargue\r\n        e.preventDefault();\r\n        // Validar que todos los campos estén llenos\r\n        let { nombres, apellidos, fechaNac, telCelular, telCasa, direccion, observaciones } = contacto;\r\n        if (nombres.trim() === \"\" || apellidos.trim() === \"\" || fechaNac.trim() === \"\" ||\r\n            telCasa.trim() === \"\" || telCelular.trim() === \"\" || direccion.trim() === \"\" ||\r\n            observaciones.trim() === \"\") {\r\n            // hay un error y todos los campos deben ser llenados\r\n            setError(true);\r\n            return;\r\n        }\r\n        else {\r\n            // significa que no hay errores en el formulario\r\n            // por si acaso, cambiamos el error a false, sin importar su valor anterior\r\n            setError(false);\r\n            // crear el contacto en la agenda\r\n            agregarContacto(contacto);\r\n\r\n            //let contactoAntiguo = { ...contacto };\r\n            //contactoAntiguo.push()\r\n            //console.log(\"Enviando formulario\");\r\n\r\n            //reinciar el formulario\r\n            setContacto({\r\n                nombres: '',\r\n                apellidos: '',\r\n                fechaNac: '',\r\n                direccion: '',\r\n                telCasa: '',\r\n                telCelular: '',\r\n                observaciones: ''\r\n\r\n            });\r\n\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <form className=\"row\" onSubmit={handleSubmit(onSubmit)}>\r\n                {\r\n                    error ?\r\n                        <div className=\"col-12\">\r\n                            <div className=\"alert alert-danger text-center\" role=\"alert\">\r\n                                <strong>Error!!</strong> Todos los campos, deben estar debidamente llenados\r\n                        </div>\r\n                        </div> : null\r\n                }\r\n                <div className=\"form-group col-md-3\">\r\n                    <label htmlFor=\"inputNombre\">Nombres:</label>\r\n                    <input type=\"text\" id=\"inputNombre\" name=\"nombres\" className=\"form-control\"\r\n                        onChange={handleChange} value={contacto.nombres} ref={register({ required: true, pattern: /^[A-Z a-z]+$/i })} />\r\n                    {errors.nombres && errors.nombres.type === \"pattern\" ? <p> Ingrese nombres válidos </p> : null}\r\n                    {errors.nombres && errors.nombres.type === \"required\" ? <p> Este campo es obligatorio </p> : null}\r\n\r\n                </div>\r\n                <div className=\"form-group col-md-3\">\r\n                    <label htmlFor=\"inputApellidos\">Apellidos:</label>\r\n                    <input type=\"text\" id=\"inputApellidos\" name=\"apellidos\" className=\"form-control\"\r\n                        onChange={handleChange} value={contacto.apellidos} ref={register({ required: true, pattern: /^[A-Z a-z]+$/i })} />\r\n                    {errors.apellidos && errors.apellidos.type === \"pattern\" ? <p> Ingrese apellidos válidos </p> : null}\r\n                    {errors.apellidos && errors.apellidos.type === \"required\" ? <p> Este campo es obligatorio </p> : null}\r\n                </div>\r\n                <div className=\"form-group col-md-3\">\r\n                    <label htmlFor=\"inputFecha\">Fecha de Nacimiento:</label>\r\n                    <input type=\"date\" id=\"inputFecha\" name=\"fechaNac\" className=\"form-control\"\r\n                        onChange={handleChange} value={contacto.fechaNac} ref={register({ required: true })} />\r\n                    {errors.fechaNac && errors.fechaNac.type === \"required\" ? <p> Este campo es obligatorio </p> : null}\r\n                </div>\r\n                <div className=\"form-group col-md-3\">\r\n                    <label htmlFor=\"inputDireccion\">Dirección:</label>\r\n                    <input type=\"text\" className=\"form-control\"\r\n                        id=\"inputDireccion\" name=\"direccion\"\r\n                        onChange={handleChange} value={contacto.direccion} ref={register({ required: true })} />\r\n                    {errors.direccion && errors.direccion.type === \"required\" ? <p> Este campo es obligatorio </p> : null}\r\n                </div>\r\n                <div className=\"form-group col-md-3\">\r\n                    <label htmlFor=\"inputTelCasa\">Teléfono de Casa:</label>\r\n                    {/* <input type=\"text\" className=\"form-control\"\r\n                        id=\"inputTelCasa\" name=\"telCasa\"\r\n            onChange={handleChange} value={contacto.telCasa} ref={register({ required: true })} />*/}\r\n                    <NumberFormat className=\"form-control\"\r\n                        id=\"inputTelCasa\" name=\"telCasa\"\r\n                        onChange={handleChange} \r\n                        value={contacto.telCasa}\r\n                        /*error={hasError(\"telCasa\")}\r\n                        helperText={hasError(\"telCasa\") && getError(\"telCasa\")}*/\r\n                        required={true}\r\n                        inputRef={register({\r\n                            required: \"Phone is required\"\r\n                        })} \r\n                        /*ref={register({ required: true })}*/\r\n                        format=\"+51 (054) ##-##-##\" allowEmptyFormatting mask=\"_\" />\r\n                    {errors.telCasa && errors.telCasa.type === \"required\" ? <p> Este campo es obligatorio </p> : null}\r\n\r\n                </div>\r\n                <div className=\"form-group col-md-3\">\r\n                    <label htmlFor=\"inputTelCelular\">Telefono Celular:</label>\r\n                    {/*<input type=\"text\" className=\"form-control\"\r\n                        id=\"inputTelCelular\" name=\"telCelular\"\r\n                        onChange={handleChange} value={contacto.telCelular} ref={register({ required: true })} />*/}\r\n                    <NumberFormat className=\"form-control\"\r\n                        id=\"inputTelCelular\" name=\"telCelular\"\r\n                        onChange={handleChange} value={contacto.telCelular} ref={register({ required: true })}\r\n                        format=\"### ### ###\" allowEmptyFormatting mask=\"_\"\r\n\r\n                    />\r\n\r\n                    {errors.telCelular && errors.telCelular.type === \"required\" ? <p> Este campo es obligatorio </p> : null}\r\n                </div>\r\n                <div className=\"form-group col-md-6\">\r\n                    <label htmlFor=\"inputObservaciones\">Observaciones:</label>\r\n                    <textarea cols=\"30\" rows=\"2\" className=\"form-control\"\r\n                        id=\"inputObservaciones\" name=\"observaciones\"\r\n                        onChange={handleChange} value={contacto.observaciones} ref={register({ required: true })} ></textarea>\r\n                    {errors.observaciones && errors.observaciones.type === \"required\" ? <p> Este campo es obligatorio </p> : null}\r\n                </div>\r\n                <div className=\"form-group col-12\">\r\n                    <button type=\"submit\" className=\"btn btn-block btn-outline-primary\">\r\n                        Agregar Contacto\r\n                </button>\r\n                </div>\r\n            </form>\r\n        </Fragment>\r\n\r\n    )\r\n}\r\n\r\nexport default Formulario\r\n","import React from 'react'\r\n\r\nconst Contacto = ({ contacto, setContactoSelec }) => {\r\n    return (\r\n        <li className=\"list-group-item\" onClick={ ()=>{\r\n            setContactoSelec(contacto);\r\n        }}>\r\n            <img src=\"https://api.adorable.io/avatars/45/abott@adorable.png\"\r\n                className=\"rounded-circle\"\r\n                alt=\"\" />\r\n            <span className=\"ml-5\">\r\n                {contacto.nombres} {contacto.apellidos}\r\n            </span>\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default Contacto\r\n","import React from 'react'\r\nimport Contacto from './Contacto'\r\n\r\nconst Contactos = ({ contactos, setContactoSelec }) => {\r\n\r\n    /*let lis = [];\r\n\r\n    contactos.forEach(c => {\r\n        lis.push(<li className=\"list-group-item\">{c.nombres}</li>)\r\n    });*/\r\n\r\n    return (\r\n        <ul className=\"list-group list-group-flush\">\r\n            {/*lis*/}\r\n            {\r\n                contactos.map(c=> { \r\n                    // return <li className=\"list-group-item\">{c.nombres}</li>\r\n                    return <Contacto contacto={c} setContactoSelec={setContactoSelec} />\r\n                })\r\n            }\r\n        </ul >\r\n    )\r\n}\r\n\r\nexport default Contactos\r\n","import React, { Fragment } from 'react'\r\n\r\nconst ContactoSeleccionado = ({ contactoselec }) => {\r\n    return (\r\n\r\n\r\n        <div className=\"card\">\r\n            <div className=\"card-head bg-dark\">\r\n                <h3 className=\"card-title text-center text-light\">Información de Contacto</h3>\r\n            </div>\r\n            <div className=\"card-body\">\r\n                {\r\n                    // si el contacto seleccionado tuviera el attr nombres,\r\n                    // significa que no es un objeto vacio\r\n                    contactoselec.nombres ? (\r\n                        <Fragment>\r\n                            <img src=\"https://api.adorable.io/avatars/45/abott@adorable.png\"\r\n                                alt=\"\" className=\"rounded-circle d-block m-auto\" />\r\n                            <p className=\"card-text\"><span>Nombres: </span>{contactoselec.nombres}</p>\r\n                            <p className=\"card-text\"><span>Apellidos: </span>{contactoselec.apellidos}</p>\r\n                            <p className=\"card-text\"><span>Fecha de Nacimiento: </span>{contactoselec.fechaNac}</p>\r\n                            <p className=\"card-text\"><span>Dirección: </span>{contactoselec.direccion}</p>\r\n                            <p className=\"card-text\"><span>Teléfono de casa: </span>{contactoselec.telCasa}</p>\r\n                            <p className=\"card-text\"><span>Teléfono de celular: </span>{contactoselec.telCelular}</p>\r\n                            <p className=\"card-text\"><span>Observaciones: </span>{contactoselec.observaciones}</p>\r\n                        </Fragment>\r\n                    ) : <p className=\"card-text text-center\"> {\"=(\"} No has seleccionado ningún contacto.</p>\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ContactoSeleccionado\r\n","import React, { Fragment, useState } from 'react';\nimport Header from './componentes/Header';\nimport Formulario from './componentes/Formulario';\nimport Contactos from './componentes/Contactos';\nimport ContactoSeleccionado from './componentes/ContactoSeleccionado';\n\nfunction App() {\n\n  // Traemos los contactos desde el Local Storage\n  let contactosLS = JSON.parse(localStorage.getItem(\"contactos\"));\n  // Si al traer los contactos del LS, no habia ninguno o\n  // que estaba indefinido\n  if(!contactosLS){\n    // crear un arreglo vacio como para inicializar contactosLS\n    contactosLS = [];\n  }\n\n  // Lista de Contactos\n  const [contactos, setContactos] = useState(contactosLS);\n\n  // Contacto Seleccionado\n  const [contactoselec, setContactoSelec] = useState({});\n\n  const agregarContacto = (objContacto) =>{\n      \n      let contactosAntiguo = [...contactos, objContacto];\n\n      localStorage.setItem(\"contactos\", JSON.stringify(contactosAntiguo));\n\n      setContactos(contactosAntiguo);\n      \n      //setContactos([...contactos, objContacto]);\n  }\n\n  return (\n    <Fragment>\n      <Header />\n      <main className=\"container-fluid\">\n        <h1 className=\"display-3 text-center\">Agenda <span className=\"text-danger\">APP</span></h1>\n        <div className=\"row\">\n          <div className=\"col\">\n            {/* Formulario*/}\n              <Formulario agregarContacto={agregarContacto}  />\n          </div>\n        </div>\n        <hr />\n        <div className=\"row\">\n            <div className=\"col-md-6\">\n              {/* Lista de contactos*/}\n              <Contactos contactos={contactos} setContactoSelec={setContactoSelec}/>\n            </div>\n            <div className=\"col-md-6\">\n              {/* Contacto seleccionado*/}\n              <ContactoSeleccionado contactoselec={contactoselec} />\n            </div>\n        </div>\n      </main>\n    </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}